/*******************************************************************************
 * @author Reika Kalseki
 * 
 * Copyright 2017
 * 
 * All rights reserved.
 * Distribution of the software in any form is only allowed with
 * explicit, prior permission from the owner.
 ******************************************************************************/
// Date: 11/05/2016 8:37:37 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX


package Reika.ChromatiCraft.Models;

import java.util.ArrayList;

import org.lwjgl.opengl.GL11;

import net.minecraft.tileentity.TileEntity;

import Reika.ChromatiCraft.Base.ChromaModelBase;
import Reika.DragonAPI.Instantiable.Rendering.LODModelPart;
import Reika.DragonAPI.Libraries.Rendering.ReikaColorAPI;
import Reika.DragonAPI.Libraries.Rendering.ReikaRenderHelper;

public class ModelPinball extends ChromaModelBase
{
	//fields
	LODModelPart Shape1;
	LODModelPart pad;
	LODModelPart Shape1a;
	LODModelPart Shape1b;

	public ModelPinball()
	{
		textureWidth = 64;
		textureHeight = 32;

		Shape1 = new LODModelPart(this, 0, 17);
		Shape1.addBox(-3F, 0F, 0F, 6, 3, 2);
		Shape1.setRotationPoint(4F, 21F, 4F);
		Shape1.setTextureSize(64, 32);
		Shape1.mirror = true;
		this.setRotation(Shape1, 0F, 0.7853982F, 0F);
		pad = new LODModelPart(this, 0, 23);
		pad.addBox(-6.5F, 0F, -0.5F, 13, 3, 1);
		pad.setRotationPoint(0F, 20.5F, 0F);
		pad.setTextureSize(64, 32);
		pad.mirror = true;
		this.setRotation(pad, 0F, 0.7853982F, 0F);
		Shape1a = new LODModelPart(this, 0, 9);
		Shape1a.addBox(-5F, 0F, 0F, 10, 4, 3);
		Shape1a.setRotationPoint(2F, 20.5F, 2F);
		Shape1a.setTextureSize(64, 32);
		Shape1a.mirror = true;
		this.setRotation(Shape1a, 0F, 0.7853982F, 0F);
		Shape1b = new LODModelPart(this, 0, 0);
		Shape1b.addBox(-7F, 0F, 0F, 14, 4, 4);
		Shape1b.setRotationPoint(0F, 20F, 0F);
		Shape1b.setTextureSize(64, 32);
		Shape1b.mirror = true;
		this.setRotation(Shape1b, 0F, 0.7853982F, 0F);
	}

	@Override
	public void renderAll(TileEntity te, ArrayList li)
	{
		Shape1.render(te, f5);
		Shape1a.render(te, f5);
		Shape1b.render(te, f5);

		GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
		GL11.glDisable(GL11.GL_LIGHTING);
		ReikaRenderHelper.disableEntityLighting();
		float tick = (float)li.get(0);
		int c = ReikaColorAPI.mixColors(0x22aaff, 0xffffff, Math.max(0, 1-(tick/4F)));
		float r = ReikaColorAPI.HextoColorMultiplier(c, 0);
		float g = ReikaColorAPI.HextoColorMultiplier(c, 1);
		float b = ReikaColorAPI.HextoColorMultiplier(c, 2);
		GL11.glColor4f(r, g, b, 1);
		pad.render(te, f5);
		GL11.glPopAttrib();
	}

	@Override
	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5);
	}

}
